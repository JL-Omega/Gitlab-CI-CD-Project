# Use the official Docker image.
image: docker:cli

# Use the docker:dind service and alias it to "docker".
services:
  - name: docker:dind
    alias: docker 

# Define variables used in the pipeline.
variables:
  IMAGE_NAME: protem
  IMAGE_TAG: $CI_COMMIT_REF_SLUG
  DOCKER_IMAGE_NAME: $IMAGE_NAME:$IMAGE_TAG

# Define the stages of the pipeline.
stages:
  - build
  - test
  - release
  - deploy

# Build Docker image stage.
build-image:
  stage: build
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug).
  # The default branch is also tagged with "latest".
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker save "$DOCKER_IMAGE_NAME" > image.tar
  artifacts:
    paths: 
      - image.tar
  # Run this job in a branch where a Dockerfile exists.
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

# Test Docker image stage.
test-image:
  stage: test
  script:
    - docker load < image.tar
    - docker run --name webapp -d -p 80:80 "$DOCKER_IMAGE_NAME"
    - sleep 10
    - apk add --no-cache curl
    - curl http://docker | grep -i "Protem"

# Release Docker image stage.
release-image:
  stage: release
  before_script:
  # Login to Docker registries.
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - docker login --username "$DOCKER_HUB_USERNAME" --password "$DOCKER_HUB_PASSWORD"
  script:
    - docker load < image.tar
    # Push image to GitLab registry.
    - docker tag "$DOCKER_IMAGE_NAME" $CI_REGISTRY_IMAGE/"$DOCKER_IMAGE_NAME"
    - docker push $CI_REGISTRY_IMAGE/"$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE"/"$IMAGE_NAME":"latest"
        docker push "$CI_REGISTRY_IMAGE"/"$IMAGE_NAME":"latest"
      fi
    # Push image to Docker Hub registry.
    - docker tag "$DOCKER_IMAGE_NAME" "$DOCKER_HUB_USERNAME"/"$DOCKER_IMAGE_NAME"
    - docker tag "$DOCKER_IMAGE_NAME" "$DOCKER_HUB_USERNAME"/"$IMAGE_NAME":$CI_COMMIT_SHORT_SHA
    - docker push "$DOCKER_HUB_USERNAME"/"$DOCKER_IMAGE_NAME"
    - docker push "$DOCKER_HUB_USERNAME"/"$IMAGE_NAME":$CI_COMMIT_SHORT_SHA 

# Deploy application stage.
deploy-app:
  stage: deploy
  script:
    - docker load < image.tar
    - chmod og= $EC2_PRIVATE_KEY
    - apk update && apk add openssh-client
    - ssh -i $EC2_PRIVATE_KEY -o StrictHostKeyChecking=no $EC2_USER@$EC2_PUBLIC_IP "docker rm -f protem || true"
    - ssh -i $EC2_PRIVATE_KEY -o StrictHostKeyChecking=no $EC2_USER@$EC2_PUBLIC_IP "docker run --name protem -d -p 8080:80 $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME"
  environment:
    name: test
    url: http://$EC2_PUBLIC_IP:8080
  only:
    - main

